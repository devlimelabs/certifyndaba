rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isCompanyUser(companyId) {
      return request.auth.token.companyID == companyId && exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid))
    }

    function isConnectedCompanyUser() {
      return request.auth.token.companyID in resource.data.connectedCompanies
    }

    function isConnectedCandidate() {
      return resource.data.id in get(/databases/$(database)/documents/companies/$(request.auth.token.companyID)).data.connectedCandidates
    }

    function isRequestCandidate() {
      return request.auth.uid == resource.data.candidateID;
    }

    function isInDocumentGroup() {
      return request.auth.token.accountType in resource.data.groups;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    match /app-nav-links/{document=**} {
      allow read: if isSignedIn() && isInDocumentGroup() // TODO: add logic for "and group matches"
    }

    match /nav-links/{document=**} {
      allow read: if true
    }

    match /companies/{companyId} {
      allow read: if isSignedIn()
      allow write: if isCompanyUser(companyId)

      match /requests/{requestId} {
        allow read: if true
        allow write: if isCompanyUser(companyId) || (isRequestCandidate() && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])))
      }

      match /users/{userId} {
        allow read: if isUser(userId) || isAdmin()
        allow write: if isUser(userId) || isAdmin()
      }
    }

    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || (isConnectedCompanyUser(userId) && isConnectedCandidate())
      allow update: if isUser(userId) && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['status','connectedCompanies']));
    }
  }
}
